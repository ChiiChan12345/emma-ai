'use client';

import { useState, useEffect } from 'react';

interface EmailTemplate {
  id: string;
  name: string;
  subject: string;
  content: string;
  type: 'welcome' | 'follow-up' | 'renewal' | 'churn-prevention' | 'check-in' | 'custom';
  variables: string[];
}

interface CommunicationRecord {
  id: string;
  clientId: string;
  clientName: string;
  type: 'email' | 'sms' | 'call';
  subject: string;
  content: string;
  status: 'sent' | 'delivered' | 'opened' | 'replied' | 'failed';
  sentAt: string;
  openedAt?: string;
  repliedAt?: string;
}

interface AutomationRule {
  id: string;
  name: string;
  trigger: string;
  action: string;
  isActive: boolean;
  lastTriggered?: string;
}

// New interfaces for enhanced functionality
interface TemplateUsageModal {
  isOpen: boolean;
  template: EmailTemplate | null;
  recipients: string;
  customSubject: string;
  customContent: string;
}

interface CommunicationDetailsModal {
  isOpen: boolean;
  communication: CommunicationRecord | null;
}

interface CreateRuleModal {
  isOpen: boolean;
  ruleName: string;
  triggerType: string;
  triggerCondition: string;
  triggerValue: string;
  actionType: string;
  actionTemplate: string;
  actionDelay: number;
}

interface CreateTemplateModal {
  isOpen: boolean;
  templateName: string;
  templateType: 'welcome' | 'follow-up' | 'renewal' | 'churn-prevention' | 'check-in' | 'custom';
  subject: string;
  content: string;
  variables: string[];
  newVariable: string;
}

const getTemplateTypeColor = (type: string) => {
  const colors = {
    'welcome': 'bg-emerald-100 text-emerald-800 border-emerald-200',
    'follow-up': 'bg-blue-100 text-blue-800 border-blue-200',
    'renewal': 'bg-amber-100 text-amber-800 border-amber-200',
    'churn-prevention': 'bg-red-100 text-red-800 border-red-200',
    'check-in': 'bg-purple-100 text-purple-800 border-purple-200',
    'custom': 'bg-gray-100 text-gray-800 border-gray-200'
  };
  return colors[type as keyof typeof colors] || colors.custom;
};

export default function CommunicationsHub() {
  const [activeTab, setActiveTab] = useState<'templates' | 'send' | 'history' | 'automation'>('templates');
  const [templates, setTemplates] = useState<EmailTemplate[]>([]);
  const [communications, setCommunications] = useState<CommunicationRecord[]>([]);
  const [automationRules, setAutomationRules] = useState<AutomationRule[]>([]);
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  // Enhanced modal states
  const [templateUsageModal, setTemplateUsageModal] = useState<TemplateUsageModal>({
    isOpen: false,
    template: null,
    recipients: '',
    customSubject: '',
    customContent: ''
  });

  const [communicationDetailsModal, setCommunicationDetailsModal] = useState<CommunicationDetailsModal>({
    isOpen: false,
    communication: null
  });

  const [createRuleModal, setCreateRuleModal] = useState<CreateRuleModal>({
    isOpen: false,
    ruleName: '',
    triggerType: 'health_score',
    triggerCondition: 'below',
    triggerValue: '',
    actionType: 'email',
    actionTemplate: '',
    actionDelay: 0
  });

  const [createTemplateModal, setCreateTemplateModal] = useState<CreateTemplateModal>({
    isOpen: false,
    templateName: '',
    templateType: 'custom',
    subject: '',
    content: '',
    variables: [],
    newVariable: ''
  });

  // Initialize with default templates
  useEffect(() => {
    const defaultTemplates: EmailTemplate[] = [
      {
        id: '1',
        name: 'Welcome Email',
        subject: 'Welcome to {{companyName}}, {{firstName}}!',
        content: `Hi {{firstName}},

Welcome to {{companyName}}! We're excited to have you on board.

Here's what you can expect:
â€¢ Personalized onboarding support
â€¢ 24/7 customer success assistance
â€¢ Regular check-ins to ensure your success

If you have any questions, don't hesitate to reach out.

Best regards,
{{senderName}}
Customer Success Team`,
        type: 'welcome',
        variables: ['firstName', 'companyName', 'senderName']
      },
      {
        id: '2',
        name: 'Health Check Follow-up',
        subject: 'How are things going, {{firstName}}?',
        content: `Hi {{firstName}},

I wanted to check in and see how your experience with {{productName}} has been so far.

I noticed your usage has been {{usageStatus}}, and I'd love to help you get the most out of our platform.

Would you be available for a quick 15-minute call this week to discuss:
â€¢ Your current goals and challenges
â€¢ Ways to optimize your workflow
â€¢ Any questions you might have

Let me know what works best for your schedule!

Best,
{{senderName}}`,
        type: 'follow-up',
        variables: ['firstName', 'productName', 'usageStatus', 'senderName']
      },
      {
        id: '3',
        name: 'Renewal Reminder',
        subject: 'Your {{productName}} renewal is coming up',
        content: `Hi {{firstName}},

I hope you've been getting great value from {{productName}}!

Your subscription is set to renew on {{renewalDate}}, and I wanted to reach out to:
â€¢ Review your current plan and usage
â€¢ Discuss any additional features that might benefit you
â€¢ Answer any questions about your renewal

Based on your usage patterns, you might benefit from {{recommendedPlan}}.

Would you like to schedule a quick call to discuss your renewal options?

Best regards,
{{senderName}}`,
        type: 'renewal',
        variables: ['firstName', 'productName', 'renewalDate', 'recommendedPlan', 'senderName']
      },
      {
        id: '4',
        name: 'Churn Prevention',
        subject: 'We miss you, {{firstName}} - Let\'s get you back on track',
        content: `Hi {{firstName}},

I noticed you haven't been active on {{productName}} recently, and I wanted to reach out personally.

I understand that priorities can shift, but I'd hate for you to miss out on the value {{productName}} can provide.

I'd love to understand:
â€¢ What challenges you're facing
â€¢ How we can better support your goals
â€¢ Whether there's anything blocking your success

I'm here to help and would be happy to jump on a quick call to discuss how we can get you back on track.

What do you say? Are you available for a 15-minute chat this week?

Best,
{{senderName}}`,
        type: 'churn-prevention',
        variables: ['firstName', 'productName', 'senderName']
      },
      {
        id: '5',
        name: 'Monthly Check-in',
        subject: 'Your monthly {{productName}} update',
        content: `Hi {{firstName}},

Hope you're having a great month! Here's your monthly update:

ðŸ“Š Usage Summary:
â€¢ Total activities: {{totalActivities}}
â€¢ Goals achieved: {{goalsAchieved}}
â€¢ Time saved: {{timeSaved}} hours

ðŸŽ¯ Recommendations:
{{recommendations}}

ðŸ“… Upcoming:
â€¢ Feature updates coming next month
â€¢ Webinar on advanced features ({{webinarDate}})

Questions or need help with anything? Just reply to this email!

Best,
{{senderName}}`,
        type: 'check-in',
        variables: ['firstName', 'productName', 'totalActivities', 'goalsAchieved', 'timeSaved', 'recommendations', 'webinarDate', 'senderName']
      }
    ];

    const defaultAutomationRules: AutomationRule[] = [
      {
        id: '1',
        name: 'Welcome Email Trigger',
        trigger: 'New client onboarded',
        action: 'Send welcome email template',
        isActive: true
      },
      {
        id: '2',
        name: 'Low Usage Alert',
        trigger: 'Usage drops below 20% for 7 days',
        action: 'Send health check follow-up',
        isActive: true
      },
      {
        id: '3',
        name: 'Renewal Reminder',
        trigger: '30 days before renewal',
        action: 'Send renewal reminder email',
        isActive: true
      },
      {
        id: '4',
        name: 'Churn Risk Prevention',
        trigger: 'Health score drops below 40',
        action: 'Send churn prevention email',
        isActive: true
      }
    ];

    const sampleCommunications: CommunicationRecord[] = [
      {
        id: '1',
        clientId: '1',
        clientName: 'Alice Johnson',
        type: 'email',
        subject: 'Welcome to Emma AI, Alice!',
        content: 'Welcome email content...',
        status: 'opened',
        sentAt: '2024-01-15T10:00:00Z',
        openedAt: '2024-01-15T10:30:00Z'
      },
      {
        id: '2',
        clientId: '2',
        clientName: 'Bob Smith',
        type: 'email',
        subject: 'How are things going, Bob?',
        content: 'Follow-up email content...',
        status: 'replied',
        sentAt: '2024-01-14T14:00:00Z',
        openedAt: '2024-01-14T14:15:00Z',
        repliedAt: '2024-01-14T15:00:00Z'
      },
      {
        id: '3',
        clientId: '3',
        clientName: 'Carol Davis',
        type: 'sms',
        subject: 'Quick check-in',
        content: 'Hi Carol! Just checking in...',
        status: 'delivered',
        sentAt: '2024-01-13T09:00:00Z'
      }
    ];

    setTemplates(defaultTemplates);
    setAutomationRules(defaultAutomationRules);
    setCommunications(sampleCommunications);
  }, []);

  const handleSendEmail = async (templateId: string, recipients: string[]) => {
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Add to communications history
      const template = templates.find(t => t.id === templateId);
      if (template) {
        const newCommunication: CommunicationRecord = {
          id: Date.now().toString(),
          clientId: 'demo',
          clientName: 'Demo Client',
          type: 'email',
          subject: template.subject,
          content: template.content,
          status: 'sent',
          sentAt: new Date().toISOString()
        };
        setCommunications(prev => [newCommunication, ...prev]);
      }
      
      setActiveTab('history');
    } catch (error) {
      console.error('Failed to send email:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateTemplate = (template: Omit<EmailTemplate, 'id'>) => {
    const newTemplate: EmailTemplate = {
      ...template,
      id: Date.now().toString()
    };
    setTemplates(prev => [...prev, newTemplate]);
    setCreateTemplateModal({ isOpen: false, templateName: '', templateType: 'custom', subject: '', content: '', variables: [], newVariable: '' });
  };

  const toggleAutomationRule = (ruleId: string) => {
    setAutomationRules(prev => 
      prev.map(rule => 
        rule.id === ruleId ? { ...rule, isActive: !rule.isActive } : rule
      )
    );
  };

  // Enhanced handler functions
  const handleUseTemplate = (template: EmailTemplate) => {
    setTemplateUsageModal({
      isOpen: true,
      template,
      recipients: '',
      customSubject: template.subject,
      customContent: template.content
    });
  };

  const handleViewCommunicationDetails = (communication: CommunicationRecord) => {
    setCommunicationDetailsModal({
      isOpen: true,
      communication
    });
  };

  const handleCreateAutomationRule = () => {
    setCreateRuleModal({
      isOpen: true,
      ruleName: '',
      triggerType: 'health_score',
      triggerCondition: 'below',
      triggerValue: '',
      actionType: 'email',
      actionTemplate: '',
      actionDelay: 0
    });
  };

  const handleSendTemplateEmail = async () => {
    if (!templateUsageModal.template || !templateUsageModal.recipients) return;
    
    setLoading(true);
    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Add to communications history
      const newCommunication: CommunicationRecord = {
        id: Date.now().toString(),
        clientId: 'demo',
        clientName: templateUsageModal.recipients.split(',')[0] || 'Demo Client',
        type: 'email',
        subject: templateUsageModal.customSubject,
        content: templateUsageModal.customContent,
        status: 'sent',
        sentAt: new Date().toISOString()
      };
      
      setCommunications(prev => [newCommunication, ...prev]);
      setTemplateUsageModal({ isOpen: false, template: null, recipients: '', customSubject: '', customContent: '' });
      setActiveTab('history');
    } catch (error) {
      console.error('Failed to send email:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveAutomationRule = () => {
    if (!createRuleModal.ruleName || !createRuleModal.triggerValue) return;
    
    const newRule: AutomationRule = {
      id: Date.now().toString(),
      name: createRuleModal.ruleName,
      trigger: `${createRuleModal.triggerType} ${createRuleModal.triggerCondition} ${createRuleModal.triggerValue}`,
      action: `Send ${createRuleModal.actionType} ${createRuleModal.actionTemplate ? `using template ${createRuleModal.actionTemplate}` : ''}`,
      isActive: true
    };
    
    setAutomationRules(prev => [...prev, newRule]);
    setCreateRuleModal({
      isOpen: false,
      ruleName: '',
      triggerType: 'health_score',
      triggerCondition: 'below',
      triggerValue: '',
      actionType: 'email',
      actionTemplate: '',
      actionDelay: 0
    });
  };

  const handleOpenCreateTemplateModal = () => {
    setCreateTemplateModal({
      isOpen: true,
      templateName: '',
      templateType: 'custom',
      subject: '',
      content: '',
      variables: [],
      newVariable: ''
    });
  };

  const handleSaveTemplate = () => {
    if (!createTemplateModal.templateName || !createTemplateModal.subject || !createTemplateModal.content) return;
    
    const newTemplate: EmailTemplate = {
      id: Date.now().toString(),
      name: createTemplateModal.templateName,
      type: createTemplateModal.templateType,
      subject: createTemplateModal.subject,
      content: createTemplateModal.content,
      variables: createTemplateModal.variables
    };
    
    setTemplates(prev => [...prev, newTemplate]);
    setCreateTemplateModal({
      isOpen: false,
      templateName: '',
      templateType: 'custom',
      subject: '',
      content: '',
      variables: [],
      newVariable: ''
    });
  };

  const handleAddVariable = () => {
    if (!createTemplateModal.newVariable || createTemplateModal.variables.includes(createTemplateModal.newVariable)) return;
    
    setCreateTemplateModal(prev => ({
      ...prev,
      variables: [...prev.variables, prev.newVariable],
      newVariable: ''
    }));
  };

  const handleRemoveVariable = (variable: string) => {
    setCreateTemplateModal(prev => ({
      ...prev,
      variables: prev.variables.filter(v => v !== variable)
    }));
  };

  const handleInsertVariable = (variable: string) => {
    const textarea = document.getElementById('template-content') as HTMLTextAreaElement;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const currentContent = createTemplateModal.content;
      const newContent = currentContent.substring(0, start) + `{{${variable}}}` + currentContent.substring(end);
      
      setCreateTemplateModal(prev => ({ ...prev, content: newContent }));
      
      // Restore cursor position
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + variable.length + 4, start + variable.length + 4);
      }, 0);
    }
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        const imageUrl = e.target?.result as string;
        const imageTag = `<img src="${imageUrl}" alt="Uploaded image" style="max-width: 100%; height: auto;" />`;
        
        setCreateTemplateModal(prev => ({
          ...prev,
          content: prev.content + '\n\n' + imageTag
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const applyTextFormatting = (format: string) => {
    const textarea = document.getElementById('template-content') as HTMLTextAreaElement;
    if (textarea) {
      const start = textarea.selectionStart;
      const end = textarea.selectionEnd;
      const selectedText = textarea.value.substring(start, end);
      const currentContent = createTemplateModal.content;
      
      let formattedText = '';
      switch (format) {
        case 'bold':
          formattedText = `<strong>${selectedText || 'Bold text'}</strong>`;
          break;
        case 'italic':
          formattedText = `<em>${selectedText || 'Italic text'}</em>`;
          break;
        case 'underline':
          formattedText = `<u>${selectedText || 'Underlined text'}</u>`;
          break;
        case 'heading':
          formattedText = `<h2>${selectedText || 'Heading'}</h2>`;
          break;
        case 'link':
          const url = prompt('Enter URL:');
          if (url) {
            formattedText = `<a href="${url}">${selectedText || 'Link text'}</a>`;
          } else {
            return;
          }
          break;
        case 'list':
          formattedText = `<ul>\n  <li>${selectedText || 'List item'}</li>\n</ul>`;
          break;
        default:
          return;
      }
      
      const newContent = currentContent.substring(0, start) + formattedText + currentContent.substring(end);
      setCreateTemplateModal(prev => ({ ...prev, content: newContent }));
      
      // Restore focus and cursor position
      setTimeout(() => {
        textarea.focus();
        textarea.setSelectionRange(start + formattedText.length, start + formattedText.length);
      }, 0);
    }
  };

  const renderTemplatesTab = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-gray-900">Email Templates</h2>
        <button
          onClick={handleOpenCreateTemplateModal}
          className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200 flex items-center space-x-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span>Create Template</span>
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {templates.map(template => (
          <div key={template.id} className="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg hover:border-gray-300 transition-all duration-200">
            <div className="flex justify-between items-start mb-4">
              <div className="flex-1">
                <h3 className="font-semibold text-gray-900 mb-2">{template.name}</h3>
                <span className={`inline-flex items-center px-3 py-1 text-xs font-medium rounded-full border ${getTemplateTypeColor(template.type)}`}>
                  {template.type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase())}
                </span>
              </div>
              <button
                onClick={() => handleUseTemplate(template)}
                className="bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 text-white px-4 py-2 rounded-lg text-sm font-medium shadow-md hover:shadow-lg transition-all duration-200"
              >
                Use Template
              </button>
            </div>
            <p className="text-sm text-gray-600 mb-4 line-clamp-2">{template.subject}</p>
            <div className="flex flex-wrap gap-1">
              {template.variables.slice(0, 3).map((variable, index) => (
                <span key={index} className="inline-flex items-center px-2 py-1 text-xs font-medium bg-indigo-100 text-indigo-800 rounded-md border border-indigo-200">
                  {variable}
                </span>
              ))}
              {template.variables.length > 3 && (
                <span className="inline-flex items-center px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-md">
                  +{template.variables.length - 3} more
                </span>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderSendTab = () => (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold text-white">Send Communication</h2>
      
      <div className="bg-gray-800 border border-gray-600 rounded-xl p-6 shadow-sm">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center space-x-3">
            <h3 className="text-lg font-semibold text-white">{templates.find(t => t.id === selectedTemplate)?.name || 'Select a Template'}</h3>
            <span className={`inline-flex items-center px-3 py-1 text-xs font-medium rounded-full border ${
              selectedTemplate ? (templates.find(t => t.id === selectedTemplate)?.type === 'welcome' ? 'bg-emerald-800 text-emerald-100 border-emerald-600' :
              templates.find(t => t.id === selectedTemplate)?.type === 'follow-up' ? 'bg-blue-800 text-blue-100 border-blue-600' :
              templates.find(t => t.id === selectedTemplate)?.type === 'renewal' ? 'bg-amber-800 text-amber-100 border-amber-600' :
              templates.find(t => t.id === selectedTemplate)?.type === 'churn-prevention' ? 'bg-red-800 text-red-100 border-red-600' :
              templates.find(t => t.id === selectedTemplate)?.type === 'check-in' ? 'bg-purple-800 text-purple-100 border-purple-600' :
              'bg-gray-700 text-gray-100 border-gray-500') : 'bg-gray-700 text-gray-100 border-gray-500'}`}>
              {selectedTemplate ? (templates.find(t => t.id === selectedTemplate)?.type.replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase()) || 'Select a Template') : 'Select a Template'}
            </span>
          </div>
          <button
            onClick={() => setSelectedTemplate(null)}
            className="text-gray-400 hover:text-white hover:bg-gray-700 p-2 rounded-lg transition-colors"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-semibold text-white mb-2">Subject</label>
            <input
              type="text"
              value={templates.find(t => t.id === selectedTemplate)?.subject || ''}
              className="w-full px-4 py-3 border-2 border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white"
              readOnly
            />
          </div>
          
          <div>
            <label className="block text-sm font-semibold text-white mb-2">Content</label>
            <textarea
              value={templates.find(t => t.id === selectedTemplate)?.content || ''}
              rows={12}
              className="w-full px-4 py-3 border-2 border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white font-mono text-sm"
              readOnly
            />
          </div>
          
          <div>
            <label className="block text-sm font-semibold text-white mb-2">Recipients</label>
            <input
              type="text"
              placeholder="Enter email addresses separated by commas"
              className="w-full px-4 py-3 border-2 border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white placeholder-gray-400"
            />
          </div>
          
          <div className="flex space-x-3 pt-4">
            <button
              onClick={() => handleSendEmail(selectedTemplate, ['demo@example.com'])}
              disabled={loading}
              className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-8 py-3 rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <span>Sending...</span>
                </>
              ) : (
                <>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                  </svg>
                  <span>Send Email</span>
                </>
              )}
            </button>
            <button
              onClick={() => setSelectedTemplate(null)}
              className="bg-transparent border-2 border-gray-600 hover:bg-gray-700 text-slate-200 hover:text-white px-8 py-3 rounded-lg font-medium transition-all duration-200"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderHistoryTab = () => (
    <div className="space-y-6">
      <h2 className="text-xl font-semibold text-white">Communication History</h2>
      
      <div className="bg-gray-800 border border-gray-600 rounded-xl overflow-hidden shadow-sm">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-600">
            <thead className="bg-gray-700">
              <tr>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Client</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Type</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Subject</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Status</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Sent</th>
                <th className="px-6 py-4 text-left text-xs font-semibold text-slate-200 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-gray-800 divide-y divide-gray-600">
              {communications.map(comm => (
                <tr key={comm.id} className="hover:bg-gray-700 transition-colors">
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-white">
                    {comm.clientName}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full border ${
                      comm.type === 'email' ? 'bg-blue-800 text-blue-100 border-blue-600' :
                      comm.type === 'sms' ? 'bg-green-800 text-green-100 border-green-600' :
                      'bg-purple-800 text-purple-100 border-purple-600'
                    }`}>
                      {comm.type.toUpperCase()}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-white max-w-xs truncate">{comm.subject}</td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex px-3 py-1 text-xs font-semibold rounded-full border ${
                      comm.status === 'sent' ? 'bg-yellow-800 text-yellow-100 border-yellow-600' :
                      comm.status === 'delivered' ? 'bg-blue-800 text-blue-100 border-blue-600' :
                      comm.status === 'opened' ? 'bg-green-800 text-green-100 border-green-600' :
                      comm.status === 'replied' ? 'bg-purple-800 text-purple-100 border-purple-600' :
                      'bg-red-800 text-red-100 border-red-600'
                    }`}>
                      {comm.status.charAt(0).toUpperCase() + comm.status.slice(1)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-slate-200">
                    {new Date(comm.sentAt).toLocaleDateString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm">
                    <button 
                      onClick={() => handleViewCommunicationDetails(comm)}
                      className="text-blue-400 hover:text-blue-300 font-medium hover:bg-blue-900 px-3 py-1 rounded-lg transition-colors"
                    >
                      View Details
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );

  const renderAutomationTab = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-xl font-semibold text-white">Automation Rules</h2>
        <button 
          onClick={handleCreateAutomationRule}
          className="bg-gradient-to-r from-emerald-600 to-emerald-700 hover:from-emerald-700 hover:to-emerald-800 text-white px-6 py-3 rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200 flex items-center space-x-2"
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
          </svg>
          <span>Create Rule</span>
        </button>
      </div>
      
      <div className="space-y-4">
        {automationRules.map(rule => (
          <div key={rule.id} className="bg-gray-800 border border-gray-600 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow">
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center space-x-4 mb-3">
                  <h3 className="font-semibold text-white">{rule.name}</h3>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={rule.isActive}
                      onChange={() => toggleAutomationRule(rule.id)}
                      className="sr-only peer"
                    />
                    <div className="w-12 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-6 peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-0.5 after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-emerald-500 peer-checked:to-emerald-600"></div>
                    <span className="ml-3 text-sm font-medium text-slate-200">
                      {rule.isActive ? 'Active' : 'Inactive'}
                    </span>
                  </label>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-slate-200">Trigger:</span>
                    <span className="text-sm text-white bg-gray-700 px-3 py-1 rounded-lg border border-gray-600">{rule.trigger}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-slate-200">Action:</span>
                    <span className="text-sm text-white bg-gray-700 px-3 py-1 rounded-lg border border-gray-600">{rule.action}</span>
                  </div>
                  {rule.lastTriggered && (
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-slate-200">Last triggered:</span>
                      <span className="text-sm text-slate-200">{new Date(rule.lastTriggered).toLocaleDateString()}</span>
                    </div>
                  )}
                </div>
              </div>
              <div className="flex space-x-2">
                <button className="text-blue-400 hover:text-blue-300 hover:bg-blue-900 p-2 rounded-lg transition-colors">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                  </svg>
                </button>
                <button className="text-red-400 hover:text-red-300 hover:bg-red-900 p-2 rounded-lg transition-colors">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Modal Components
  const renderCreateTemplateModal = () => {
    if (!createTemplateModal.isOpen) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-xl max-w-6xl w-full max-h-[95vh] overflow-y-auto border border-gray-600">
          <div className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-2xl font-semibold text-white">Create New Template</h3>
              <button
                onClick={() => setCreateTemplateModal({ isOpen: false, templateName: '', templateType: 'custom', subject: '', content: '', variables: [], newVariable: '' })}
                className="text-gray-400 hover:text-white p-2 rounded-lg hover:bg-gray-700 transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Template Settings */}
              <div className="lg:col-span-1 space-y-6">
                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Template Name</label>
                  <input
                    type="text"
                    value={createTemplateModal.templateName}
                    onChange={(e) => setCreateTemplateModal(prev => ({ ...prev, templateName: e.target.value }))}
                    placeholder="Enter template name"
                    className="w-full px-4 py-3 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white placeholder-gray-400"
                  />
                </div>

                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Template Type</label>
                  <select
                    value={createTemplateModal.templateType}
                    onChange={(e) => setCreateTemplateModal(prev => ({ ...prev, templateType: e.target.value as any }))}
                    className="w-full px-4 py-3 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white"
                  >
                    <option value="welcome">Welcome</option>
                    <option value="follow-up">Follow-up</option>
                    <option value="renewal">Renewal</option>
                    <option value="churn-prevention">Churn Prevention</option>
                    <option value="check-in">Check-in</option>
                    <option value="custom">Custom</option>
                  </select>
                </div>

                {/* Variables Section */}
                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Template Variables</label>
                  <div className="space-y-3">
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={createTemplateModal.newVariable}
                        onChange={(e) => setCreateTemplateModal(prev => ({ ...prev, newVariable: e.target.value }))}
                        placeholder="Variable name (e.g., clientName)"
                        className="flex-1 px-3 py-2 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white placeholder-gray-400 text-sm"
                      />
                      <button
                        onClick={handleAddVariable}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
                      >
                        Add
                      </button>
                    </div>
                    
                    <div className="flex flex-wrap gap-2 max-h-32 overflow-y-auto">
                      {createTemplateModal.variables.map((variable, index) => (
                        <div key={index} className="flex items-center bg-blue-800 text-blue-100 px-3 py-1 rounded-full text-sm">
                          <span>{variable}</span>
                          <button
                            onClick={() => handleRemoveVariable(variable)}
                            className="ml-2 text-blue-200 hover:text-white"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>

                    {createTemplateModal.variables.length > 0 && (
                      <div>
                        <p className="text-sm text-gray-300 mb-2">Click to insert variable:</p>
                        <div className="flex flex-wrap gap-1">
                          {createTemplateModal.variables.map((variable, index) => (
                            <button
                              key={index}
                              onClick={() => handleInsertVariable(variable)}
                              className="bg-gray-700 hover:bg-gray-600 text-gray-200 px-2 py-1 rounded text-xs border border-gray-600"
                            >
                              {`{{${variable}}}`}
                            </button>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* Template Content */}
              <div className="lg:col-span-2 space-y-6">
                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Subject Line</label>
                  <input
                    type="text"
                    value={createTemplateModal.subject}
                    onChange={(e) => setCreateTemplateModal(prev => ({ ...prev, subject: e.target.value }))}
                    placeholder="Enter email subject"
                    className="w-full px-4 py-3 border border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-gray-700 text-white placeholder-gray-400"
                  />
                </div>

                {/* Rich Text Editor Toolbar */}
                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Email Content</label>
                  <div className="border border-gray-600 rounded-lg bg-gray-700">
                    {/* Toolbar */}
                    <div className="flex flex-wrap items-center gap-1 p-3 border-b border-gray-600 bg-gray-750">
                      <button
                        onClick={() => applyTextFormatting('bold')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Bold"
                      >
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"/>
                        </svg>
                      </button>
                      <button
                        onClick={() => applyTextFormatting('italic')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Italic"
                      >
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4h-8z"/>
                        </svg>
                      </button>
                      <button
                        onClick={() => applyTextFormatting('underline')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Underline"
                      >
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"/>
                        </svg>
                      </button>
                      <div className="w-px h-6 bg-gray-600 mx-1"></div>
                      <button
                        onClick={() => applyTextFormatting('heading')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Heading"
                      >
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M5 4v3h5.5v12h3V7H19V4z"/>
                        </svg>
                      </button>
                      <button
                        onClick={() => applyTextFormatting('link')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Link"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
                        </svg>
                      </button>
                      <button
                        onClick={() => applyTextFormatting('list')}
                        className="p-2 hover:bg-gray-600 rounded text-white transition-colors"
                        title="Bullet List"
                      >
                        <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M4 10.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-6c-.83 0-1.5.67-1.5 1.5S3.17 7.5 4 7.5 5.5 6.83 5.5 6 4.83 4.5 4 4.5zm0 12c-.83 0-1.5.68-1.5 1.5s.68 1.5 1.5 1.5 1.5-.68 1.5-1.5-.67-1.5-1.5-1.5zM7 19h14v-2H7v2zm0-6h14v-2H7v2zm0-8v2h14V5H7z"/>
                        </svg>
                      </button>
                      <div className="w-px h-6 bg-gray-600 mx-1"></div>
                      <label className="p-2 hover:bg-gray-600 rounded text-white transition-colors cursor-pointer" title="Insert Image">
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                        </svg>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={handleImageUpload}
                          className="hidden"
                        />
                      </label>
                    </div>
                    
                    {/* Content Area */}
                    <textarea
                      id="template-content"
                      value={createTemplateModal.content}
                      onChange={(e) => setCreateTemplateModal(prev => ({ ...prev, content: e.target.value }))}
                      placeholder="Enter your email content here. You can use HTML tags for formatting."
                      rows={16}
                      className="w-full px-4 py-3 bg-gray-700 text-white placeholder-gray-400 border-0 focus:ring-0 resize-none font-mono text-sm"
                    />
                  </div>
                  <p className="text-xs text-gray-400 mt-2">
                    Tip: You can use HTML tags for rich formatting, or use the toolbar buttons above. Insert variables using the buttons in the sidebar.
                  </p>
                </div>

                {/* Preview Section */}
                <div>
                  <label className="block text-sm font-semibold text-white mb-2">Preview</label>
                  <div className="border border-gray-600 rounded-lg bg-white p-4 max-h-64 overflow-y-auto">
                    <div className="text-gray-900">
                      <h3 className="font-semibold mb-2">{createTemplateModal.subject || 'Subject Preview'}</h3>
                      <div 
                        className="prose prose-sm max-w-none"
                        dangerouslySetInnerHTML={{ 
                          __html: createTemplateModal.content.replace(/\n/g, '<br>') || '<em>Content preview will appear here...</em>' 
                        }}
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="flex justify-end space-x-3 mt-8 pt-6 border-t border-gray-600">
              <button
                onClick={() => setCreateTemplateModal({ isOpen: false, templateName: '', templateType: 'custom', subject: '', content: '', variables: [], newVariable: '' })}
                className="px-6 py-3 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-700 hover:text-white transition-colors font-medium"
              >
                Cancel
              </button>
              <button
                onClick={handleSaveTemplate}
                disabled={!createTemplateModal.templateName || !createTemplateModal.subject || !createTemplateModal.content}
                className="px-8 py-3 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white rounded-lg font-medium shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Create Template
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderTemplateUsageModal = () => {
    if (!templateUsageModal.isOpen || !templateUsageModal.template) return null;

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto border border-gray-600">
          <div className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-white">Use Template: {templateUsageModal.template.name}</h3>
              <button
                onClick={() => setTemplateUsageModal({ isOpen: false, template: null, recipients: '', customSubject: '', customContent: '' })}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-white mb-2">Recipients (comma-separated emails)</label>
                <input
                  type="text"
                  value={templateUsageModal.recipients}
                  onChange={(e) => setTemplateUsageModal(prev => ({ ...prev, recipients: e.target.value }))}
                  placeholder="client@example.com, another@example.com"
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-white mb-2">Subject</label>
                <input
                  type="text"
                  value={templateUsageModal.customSubject}
                  onChange={(e) => setTemplateUsageModal(prev => ({ ...prev, customSubject: e.target.value }))}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-white mb-2">Content</label>
                <textarea
                  value={templateUsageModal.customContent}
                  onChange={(e) => setTemplateUsageModal(prev => ({ ...prev, customContent: e.target.value }))}
                  rows={12}
                  className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono text-sm"
                />
              </div>

              <div className="flex justify-end space-x-3 pt-4">
                <button
                  onClick={() => setTemplateUsageModal({ isOpen: false, template: null, recipients: '', customSubject: '', customContent: '' })}
                  className="px-6 py-3 border border-gray-600 text-gray-300 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSendTemplateEmail}
                  disabled={loading || !templateUsageModal.recipients}
                  className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center space-x-2"
                >
                  {loading ? (
                    <>
                      <svg className="animate-spin w-5 h-5" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      <span>Sending...</span>
                    </>
                  ) : (
                    <span>Send Email</span>
                  )}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const renderCommunicationDetailsModal = () => {
    if (!communicationDetailsModal.isOpen || !communicationDetailsModal.communication) return null;

    const communication = communicationDetailsModal.communication;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-xl max-w-2xl w-full border border-gray-600">
          <div className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-white">Communication Details</h3>
              <button
                onClick={() => setCommunicationDetailsModal({ isOpen: false, communication: null })}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Client</label>
                <p className="text-white">{communication.clientName}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Type</label>
                <p className="text-white capitalize">{communication.type}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Subject</label>
                <p className="text-white">{communication.subject}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Content</label>
                <div className="bg-gray-700 rounded-lg p-4 text-white whitespace-pre-wrap">
                  {communication.content}
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Status</label>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                  communication.status === 'sent' ? 'bg-blue-800 text-blue-100' :
                  communication.status === 'delivered' ? 'bg-green-800 text-green-100' :
                  communication.status === 'opened' ? 'bg-yellow-800 text-yellow-100' :
                  communication.status === 'replied' ? 'bg-purple-800 text-purple-100' :
                  'bg-red-800 text-red-100'
                }`}>
                  {communication.status}
                </span>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Sent At</label>
                <p className="text-white">{new Date(communication.sentAt).toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Tab Navigation */}
      <div className="flex space-x-1 bg-gray-800 p-1 rounded-lg border border-gray-600">
        {['templates', 'send', 'history', 'automation'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab as any)}
            className={`flex-1 py-3 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === tab
                ? 'bg-blue-600 text-white shadow-sm'
                : 'text-gray-300 hover:text-white hover:bg-gray-700'
            }`}
          >
            {tab.charAt(0).toUpperCase() + tab.slice(1)}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      {activeTab === 'templates' && renderTemplatesTab()}
      {activeTab === 'send' && renderSendTab()}
      {activeTab === 'history' && renderHistoryTab()}
      {activeTab === 'automation' && renderAutomationTab()}

      {/* Modals */}
      {renderCreateTemplateModal()}
      {renderTemplateUsageModal()}
      {renderCommunicationDetailsModal()}
    </div>
  );
}

    const communication = communicationDetailsModal.communication;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-xl max-w-2xl w-full border border-gray-600">
          <div className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-white">Communication Details</h3>
              <button
                onClick={() => setCommunicationDetailsModal({ isOpen: false, communication: null })}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Client</label>
                <p className="text-white">{communication.clientName}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Type</label>
                <p className="text-white capitalize">{communication.type}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Subject</label>
                <p className="text-white">{communication.subject}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Content</label>
                <div className="bg-gray-700 rounded-lg p-4 text-white whitespace-pre-wrap">
                  {communication.content}
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Status</label>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                  communication.status === 'sent' ? 'bg-blue-800 text-blue-100' :
                  communication.status === 'delivered' ? 'bg-green-800 text-green-100' :
                  communication.status === 'opened' ? 'bg-yellow-800 text-yellow-100' :
                  communication.status === 'replied' ? 'bg-purple-800 text-purple-100' :
                  'bg-red-800 text-red-100'
                }`}>
                  {communication.status}
                </span>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Sent At</label>
                <p className="text-white">{new Date(communication.sentAt).toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Tab Navigation */}
      <div className="flex space-x-1 bg-gray-800 p-1 rounded-lg border border-gray-600">
        {['templates', 'send', 'history', 'automation'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab as any)}
            className={`flex-1 py-3 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === tab
                ? 'bg-blue-600 text-white shadow-sm'
                : 'text-gray-300 hover:text-white hover:bg-gray-700'
            }`}
          >
            {tab.charAt(0).toUpperCase() + tab.slice(1)}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      {activeTab === 'templates' && renderTemplatesTab()}
      {activeTab === 'send' && renderSendTab()}
      {activeTab === 'history' && renderHistoryTab()}
      {activeTab === 'automation' && renderAutomationTab()}

      {/* Modals */}
      {renderCreateTemplateModal()}
      {renderTemplateUsageModal()}
      {renderCommunicationDetailsModal()}
    </div>
  );
}
        c o n s t   c o m m u n i c a t i o n   =   c o m m u n i c a t i o n D e t a i l s M o d a l . c o m m u n i c a t i o n ;  
 
    const communication = communicationDetailsModal.communication;
    
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-xl max-w-2xl w-full border border-gray-600">
          <div className="p-6">
            <div className="flex justify-between items-center mb-6">
              <h3 className="text-xl font-semibold text-white">Communication Details</h3>
              <button
                onClick={() => setCommunicationDetailsModal({ isOpen: false, communication: null })}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Client</label>
                <p className="text-white">{communication.clientName}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Type</label>
                <p className="text-white capitalize">{communication.type}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Subject</label>
                <p className="text-white">{communication.subject}</p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Content</label>
                <div className="bg-gray-700 rounded-lg p-4 text-white whitespace-pre-wrap">
                  {communication.content}
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Status</label>
                <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                  communication.status === 'sent' ? 'bg-blue-800 text-blue-100' :
                  communication.status === 'delivered' ? 'bg-green-800 text-green-100' :
                  communication.status === 'opened' ? 'bg-yellow-800 text-yellow-100' :
                  communication.status === 'replied' ? 'bg-purple-800 text-purple-100' :
                  'bg-red-800 text-red-100'
                }`}>
                  {communication.status}
                </span>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-400 mb-1">Sent At</label>
                <p className="text-white">{new Date(communication.sentAt).toLocaleString()}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Tab Navigation */}
      <div className="flex space-x-1 bg-gray-800 p-1 rounded-lg border border-gray-600">
        {['templates', 'send', 'history', 'automation'].map((tab) => (
          <button
            key={tab}
            onClick={() => setActiveTab(tab as any)}
            className={`flex-1 py-3 px-4 rounded-md text-sm font-medium transition-colors ${
              activeTab === tab
                ? 'bg-blue-600 text-white shadow-sm'
                : 'text-gray-300 hover:text-white hover:bg-gray-700'
            }`}
          >
            {tab.charAt(0).toUpperCase() + tab.slice(1)}
          </button>
        ))}
      </div>

      {/* Tab Content */}
      {activeTab === 'templates' && renderTemplatesTab()}
      {activeTab === 'send' && renderSendTab()}
      {activeTab === 'history' && renderHistoryTab()}
      {activeTab === 'automation' && renderAutomationTab()}

      {/* Modals */}
      {renderCreateTemplateModal()}
      {renderTemplateUsageModal()}
      {renderCommunicationDetailsModal()}
    </div>
  );
}
